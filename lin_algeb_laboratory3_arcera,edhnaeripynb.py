# -*- coding: utf-8 -*-
"""Lin-Algeb_Laboratory3_Arcera,Edhnaeripynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BNgHq05TPFyu9UPFNPQI5tzCbIvNSgtT

###ACTIVITY TASK 1

The general linear equation form 
$$ E = 4\hat{x} + 6\hat{y} \\ A = 8\hat{x} + 9\hat{y}$$.

The vector form 
$$ S = \begin{Bmatrix}scalarP\cdot\begin{bmatrix}  4 \\ 6\\\end{bmatrix}, scalarS\cdot \begin{bmatrix} 8 \\ 9\\\end{bmatrix}\end {Bmatrix} $$
"""

import numpy as np
import matplotlib.pyplot as plt

vectorE = np.array([4,6])
vectorA = np.array([8,9])

scalar = np.arange(-4,4,.4)

scalarP, scalarS = np.meshgrid(scalar,scalar)
spanRx = scalarP * vectorE[0] + scalarS * vectorA[0]
spanRy = scalarP * vectorA[1] + scalarS * vectorA[1]
plt.scatter(spanRx, spanRy, s=5, alpha=0.75, color="red")

plt.xlim(-60,60)
plt.ylim(-60,60)
plt.axhline(y=0, color='k')
plt.axvline(x=0, color='k')
plt.grid()
plt.show()

"""###ACTIVITY TASK 2

The general linear equation form
$$ E = 4\hat{x} + 6\hat{y} \\ A = 8\hat{x} - 9\hat{y}$$.

The vector form 
$$ scalarE = \begin{bmatrix} 4 \\ 6\end{bmatrix} , scalarA = \begin{bmatrix} 8 \\ - 9\end{bmatrix}\\ $$
$$ scalarL = \begin{bmatrix} 4 \\ 6\end{bmatrix} , scalarS = \begin{bmatrix} 8 \\ - 9\end{bmatrix}\\ $$
$$ scalarK = \begin{bmatrix} 4 \\ 6\end{bmatrix} , scalarT = \begin{bmatrix} 8 \\ - 9\end{bmatrix}\\ $$
"""

import numpy as np
import matplotlib.pyplot as plt

vectorE = np.array([4,6])
vectorA = np.array([8,-9])

scalarK = np.arange(-1,1,.5)
scalarR = np.arange(-4,4,.4)
scalarB = np.arange(-8,8,.7)

scalarE, scalarA = np.meshgrid(scalarK,scalarK)
scalarL, scalarS = np.meshgrid(scalarR,scalarR)
scalarK, scalarT = np.meshgrid(scalarB,scalarB)

spanRxA = scalarK * vectorE[0] + scalarT * vectorA[0]
spanRyA = scalarK * vectorA[1] + scalarT * vectorA[1]
spanRxB = scalarL * vectorE[0] + scalarS * vectorA[0]
spanRyB = scalarL * vectorB[1] + scalarS * vectorA[1]
spanRxC = scalarE * vectorE[0] + scalarA * vectorA[0]
spanRyC = scalarE * vectorE[1] + scalarA * vectorA[1]

plt.scatter(spanRxA, spanRyA, s=7, alpha=0.85, color="green")
plt.scatter(spanRxB, spanRyB, s=7, alpha=0.85, color="black")
plt.scatter(spanRxC, spanRyC, s=7, alpha=0.85, color="purple")

plt.xlim(-100,100)
plt.ylim(-100,100)
plt.axhline(y=0, color='k')
plt.axvline(x=0, color='k')
plt.grid()
plt.show()